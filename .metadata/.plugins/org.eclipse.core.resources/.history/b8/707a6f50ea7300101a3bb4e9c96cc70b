package com.br.api.forum_hub.config.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.br.api.forum_hub.model.Usuario;
import com.br.api.forum_hub.repository.IUsuarioRepository;
import com.br.api.forum_hub.service.TokenService;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class SecurityFilter extends OncePerRequestFilter{

	@Autowired
	private TokenService tokenService;
	@Autowired
	private IUsuarioRepository repository;
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		
		if(request.getRequestURI().equals("/forum-hub/login") || 
				request.getRequestURI().equals("/forum-hub/login") || 
				request.getRequestURI().equals("topicos/listagem")) {
			filterChain.doFilter(request, response);
			return;
		}
		
		var tokenJwt = recuperarToken(request);
		if(tokenJwt != null) {
			try {
				var subject = tokenService.getSubject(tokenJwt);
				var usuario = repository.findByEmail(subject)
						.orElseThrow(() -> new RuntimeException("Usuário não encontrado"));
				
				var authentication = new UsernamePasswordAuthenticationToken(usuario, null, usuario.getAuthorities());
				
				SecurityContextHolder.getContext().setAuthentication(authentication);
			}catch(RuntimeException e) {
				response.sendError(HttpServletResponse.SC_FORBIDDEN, e.getMessage());
				return;
			}
		}
		
		filterChain.doFilter(request, response);
		
	}

	private String recuperarToken(HttpServletRequest request) {
		
		var authorizationHeader = request.getHeader("Authorization");
		if(authorizationHeader != null) {
			return authorizationHeader.replace("Bearer", "").trim();
		}
		return null;
	}

}
